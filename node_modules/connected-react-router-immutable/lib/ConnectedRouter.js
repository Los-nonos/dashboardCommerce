'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ConnectedRouter = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRedux = require('react-redux');

var _reactRouter = require('react-router');

var _actions = require('./actions');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/*
 * ConnectedRouter listens to a history object passed from props.
 * When history is changed, it dispatches action to redux store.
 * Then, store will pass props to component to render.
 * This creates uni-directional flow from history->store->router->components.
 */

var ConnectedRouter = exports.ConnectedRouter = function (_Component) {
  _inherits(ConnectedRouter, _Component);

  function ConnectedRouter(props, context) {
    _classCallCheck(this, ConnectedRouter);

    var _this = _possibleConstructorReturn(this, (ConnectedRouter.__proto__ || Object.getPrototypeOf(ConnectedRouter)).call(this, props));

    _this.inTimeTravelling = false;

    // Subscribe to store changes
    _this.unsubscribe = context.store.subscribe(function () {
      var locationInStore = context.store.getState().getIn(['router', 'location', 'pathname']);
      var locationInHistory = props.history.location.pathname;

      // If we do time travelling, the location in store is changed but location in history is not changed
      if (locationInHistory !== locationInStore) {
        _this.inTimeTravelling = true;
        // Update history's location to match store's location
        props.history.push(locationInStore);
      }
    });

    // Listen to history changes
    _this.unlisten = props.history.listen(function (location, action) {
      // Dispatch onLocationChanged except when we're in time travelling
      if (!_this.inTimeTravelling) {
        props.onLocationChanged(location, action);
      } else {
        _this.inTimeTravelling = false;
      }
    });
    return _this;
  }

  _createClass(ConnectedRouter, [{
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.unlisten();
      this.unsubscribe();
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          action = _props.action,
          location = _props.location,
          history = _props.history,
          basename = _props.basename,
          children = _props.children;

      return _react2.default.createElement(
        _reactRouter.StaticRouter,
        {
          action: action,
          location: location,
          basename: basename,
          onPush: history.push,
          onReplace: history.replace,
          blockTransitions: history.block
        },
        children
      );
    }
  }]);

  return ConnectedRouter;
}(_react.Component);

ConnectedRouter.contextTypes = {
  store: _react.PropTypes.shape({
    getState: _react.PropTypes.func.isRequired,
    subscribe: _react.PropTypes.func.isRequired
  }).isRequired
};

ConnectedRouter.propTypes = {
  history: _react.PropTypes.shape({
    listen: _react.PropTypes.func.isRequired,
    location: _react.PropTypes.object.isRequired,
    push: _react.PropTypes.func.isRequired
  }).isRequired,
  location: _react.PropTypes.oneOfType([_react.PropTypes.object, _react.PropTypes.string]).isRequired,
  action: _react.PropTypes.string.isRequired,
  basename: _react.PropTypes.string,
  children: _react.PropTypes.oneOfType([_react.PropTypes.func, _react.PropTypes.node]),
  onLocationChanged: _react.PropTypes.func.isRequired
};

var mapStateToProps = function mapStateToProps(state) {
  return {
    action: state.getIn(['router', 'action']),
    location: state.getIn(['router', 'location']).toJS()
  };
};

var mapDispatchToProps = function mapDispatchToProps(dispatch) {
  return {
    onLocationChanged: function onLocationChanged(location, action) {
      return dispatch((0, _actions.onLocationChanged)(location, action));
    }
  };
};

exports.default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(ConnectedRouter);